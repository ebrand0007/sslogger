head	1.10;
access;
symbols;
locks
	ebrand:1.10; strict;
comment	@ * @;


1.10
date	2009.02.17.11.56.43;	author root;	state Exp;
branches;
next	1.9;

1.9
date	2009.02.05.22.58.48;	author root;	state Exp;
branches;
next	1.8;

1.8
date	2009.01.15.20.27.02;	author root;	state Exp;
branches;
next	1.7;

1.7
date	2009.01.08.23.15.57;	author root;	state Exp;
branches;
next	1.6;

1.6
date	2009.01.08.22.36.20;	author root;	state Exp;
branches;
next	1.5;

1.5
date	2009.01.08.12.08.44;	author root;	state Exp;
branches;
next	1.4;

1.4
date	2008.12.18.23.18.21;	author root;	state Exp;
branches;
next	1.3;

1.3
date	2008.12.16.23.22.03;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2008.12.16.12.13.50;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2008.12.16.12.07.44;	author root;	state Exp;
branches;
next	;


desc
@Before adding -c, no logging
@


1.10
log
@last version before changing to sslogger
@
text
@/*
* Copyright (c) 1980 Regents of the University of California.
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
* 1. Redistributions of source code must retain the above copyright
*    notice, this list of conditions and the following disclaimer.
* 2. Redistributions in binary form must reproduce the above copyright
*    notice, this list of conditions and the following disclaimer in the
*    documentation and/or other materials provided with the distribution.
* 3. All advertising materials mentioning features or use of this software
*    must display the following acknowledgement:
*	This product includes software developed by the University of
*	California, Berkeley and its contributors.
* 4. Neither the name of the University nor the names of its contributors
*    may be used to endorse or promote products derived from this software
*    without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
* ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
* OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
* LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
* OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
* SUCH DAMAGE.
*/

/*
* 1999-02-22 Arkadiusz Miï¿½kiewicz <misiek@@pld.ORG.PL>
* - added Native Language Support
*
* 2000-07-30 Per Andreas Buer <per@@linpro.no> - added "q"-option
*/

#include <stdio.h>
#include <stdlib.h>
#include <paths.h>
#include <time.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <termios.h>
#include <sys/ioctl.h>
#include <sys/time.h>
#include <sys/file.h>
#include <sys/signal.h>
#include <syslog.h>
#include <pwd.h>
#include "nls.h"
#include "config.h"

#ifdef __linux__
#include <unistd.h>
#include <string.h>
#endif

#ifdef HAVE_LIBUTIL
#include <pty.h>
#endif

//Prototypes
void finish(int);
void done(void);
void fail(void);
void resize(int);
void fixtty(void);
void getmaster(void);
void getslave(void);
void doinput(void);
void dooutput(void);
void doshell(void);
void undo_setuid(void);
void do_setuid(void);
int read_conf(const char *key, char **value);
int readConf(void);


char	*shell;
FILE	*fscript;
FILE    *pinput; // pipe command input
int	master;
int	slave;
int	child;
int	subchild;
char	*fname; 
char	*sfname; //short file name
char	*comment;
struct  passwd *upasswd;

struct	termios tt;
struct	winsize win;
int	lb;
int	l;
#ifndef HAVE_LIBUTIL
char	line[] = "/dev/ptyXX";
#endif
char	*cflg = NULL;
int	debug=0;
int	fflg = 0;
int	hflg = 1;  //on by default
int	qflg = 0;
int	tflg = 0;
char *ruser;
static char *progname;

//below from slogger.conf
int log_all_cmds=0;
int commentSize=100; //Max comment len
int minCommentSize=0; //Min coment len

#define LINE_LEN 100
int read_conf( const char *key, char **value) {
    //reads config_file looking fir key, 
    // sets  value if found, null otherwise
    // returns -1 on FNF, 0 on keynot found, 1 on found
    FILE *fp;
    char line[LINE_LEN];
    int end;
    int retVal=0;
    int keyLen=strlen(key);
    const char *conf_file=STRINGIFY(CONF_FILE);
    //if (*value!=NULL) free(*value);
    fp = fopen(conf_file, "r");    
    if (fp == NULL ) {
        fprintf ( stderr,"Can't open config file: %s\n",conf_file);
        return(-1); /* Can't open file */
    }
    
    while (fgets(line, LINE_LEN, fp)) {
        /* All options are key=value (no spaces)*/
        if (line == NULL) continue;        
        //if (debug) printf("line:%s",line);
        if (strncmp(line, key, keyLen) == 0) { //we have a match //we have a match
            end = strlen(line);
            if (line[end-1] == '\n')
                line[end-1] = 0; /* Remove trailing newline */
        *value = strdup(line+keyLen+1); //add equal to  key=val
        if (debug) printf("Found key:%s val:%s\n",key,*value);
        if (fp!=NULL) fclose(fp);
        return(1); //happy return
        }
    }
    return 0; //unhappy return
}

/* Remember the effective and real UIDs. */
static uid_t euid, ruid;
static gid_t geuid,gruid;

static void
die_if_link(char *fn) {
    struct stat s;
    if (lstat(fn, &s) == 0 && (S_ISLNK(s.st_mode) || s.st_nlink > 1)) {
        fprintf(stderr,
            _("Warning: `%s' is a link.\n"
            "Use `%s [options] %s' if you really "
            "want to use it.\n"
            "Slogger not started.\n"),
            fn, progname, fn);
        exit(1);
    }
}

/*
* Stop extremely silly gcc complaint on %c:
*  warning: `%c' yields only last 2 digits of year in some locales
*/
static void
my_strftime(char *buf, size_t len, const char *fmt, const struct tm *tm) {
    strftime(buf, len, fmt, tm);
}


/* Read slogger.conf an set global vars */
int readConf (void) {
    commentSize=MAXCOMMENTSIZE; //set default size
    minCommentSize=MINCOMMENTSIZE; //dito
    /* Get options from congig file */
    char *value;
    int found=0;
    found=read_conf("log_all_cmds",&value);
    if (found==1) {
        //printf ("found, result is: %s\n",value);
        log_all_cmds=atoi(value);
    }
    else {
        //printf ("Not found\n");
        log_all_cmds=0; // set to not log all cmds
    }
    found=read_conf("max_comment",&value);
    if (found==1) {
        //printf ("found, result is: %s\n",value);
        commentSize=atoi(value);
    }
    
    found=read_conf("min_comment",&value);
    if (found==1) {
        //printf ("found, result is: %s\n",value);
        minCommentSize=atoi(value);
    }

    if (debug) printf("log_all_cmds=%d\n",log_all_cmds);
    if (debug) printf("Max commentSize=%d\n",commentSize);
    if (debug) printf("minCommentSize=%d\n",minCommentSize);
    return 1; //happy read
    
}

/*
* script -t prints time delays as floating point numbers
* The example program (scriptreplay) that we provide to handle this
* timing output is a perl script, and does not handle numbers in
* locale format (not even when "use locale;" is added).
* So, since these numbers are not for human consumption, it seems
* easiest to set LC_NUMERIC here.
*/

int
main(int argc, char **argv) {
    /* unset suid bits */
    ruid = getuid ();
    gruid = getgid (); 
    euid = geteuid ();
    geuid = getegid ();
    undo_setuid ();
    

    extern int optind;
    char *p;
    int ch;
 
    progname = argv[0];
    if ((p = strrchr(progname, '/')) != NULL)
        progname = p+1;


    setlocale(LC_ALL, "");
    setlocale(LC_NUMERIC, "C");	/* see comment above */
    bindtextdomain(PACKAGE, LOCALEDIR);
    textdomain(PACKAGE);

    if (argc == 2) {
        if (!strcmp(argv[1], "-V") || !strcmp(argv[1], "--version")) {
            printf(_("%s (%s)\n"),
                progname, VERSION);
            return 0;
        }
    }

    while ((ch = getopt(argc, argv, "c:fqthd")) != -1)
        switch((char)ch) {
        case 'c':
            cflg = optarg;
            break;
        case 'f':
            fflg++;
            break;
        case 'q':
            qflg++;
            break;
        case 't':
            tflg++;
            break;
        case 'h': 
            hflg=0; //default is true, cd to $HOME
            break; 
        case 'd' :
            debug=1;
            break;
        case '?':
        default:
            fprintf(stderr,
                _("usage: %s [-f] [-q] [-h] [-d]\n"),progname);
            exit(1);
        }
    argc -= optind;
    argv += optind;
    readConf();
    //Turn on flushing by default
    //fflg++;
   
    /* log name format in fname*/
    char hname[MAXHOSTNAMELEN];
    int r=gethostname(hname,sizeof(hname));
    //get user
    //ruser=getpwuid(geteuid())
    ruser=getlogin(); //dont reaally like this
    if (ruser == NULL ) {
        ruser=getenv("LOGNAME");
            if (ruser == NULL ) {
                printf("Unabel to determine user login id\n");
                exit(EXIT_FAILURE);
             }
    }
    time_t tvec;
    char ldate[BUFSIZ];
    tvec = time((time_t *)NULL);
    if (debug) {
        printf ("set euid: %d\n",euid); //suid user
        printf ("real ruid: %d\n",ruid); //real user
    }

    //get the ruid passwd entry for the process
    upasswd=getpwuid((uid_t)ruid);
    if (!upasswd) {
        printf("Unknown euid, exiting\n");
        exit(EXIT_FAILURE);
    }

    if (! (upasswd->pw_shell && upasswd->pw_name && upasswd->pw_name[0] 
              && upasswd->pw_dir && upasswd->pw_dir[0] && upasswd->pw_passwd)) {
        printf("Bad password entry for uid:%d, exiting\n",ruid);
        exit(EXIT_FAILURE);
    }

    shell=upasswd->pw_shell;
    if (debug) printf("DEBUG: ruid:%s shell:%s\n",upasswd->pw_name,shell);
    if (shell == NULL)
        shell = _PATH_BSHELL;
    setenv("SHELL",shell,1);
    my_strftime(ldate, sizeof ldate, "%Y.%m.%d-%H:%M:%S.log", localtime(&tvec));
    
    const char *log_dir=STRINGIFY(LOG_DIR);
    asprintf(&fname,"%s/sl-%s-%s-%s-%s",log_dir,hname,ruser,upasswd->pw_name,ldate);
    asprintf(&sfname,"sl-%s-%s-%s-%s",hname,ruser,upasswd->pw_name,ldate);
    /* end log name format */

    do_setuid ();
    fscript = fopen(fname, "w"); //TODO: make this a read/write, and rewind the file when done(karllos)
    if (fscript == NULL) {
        undo_setuid();
        perror(fname);
        fail();
    }
    undo_setuid();

    //openlog("slogger", LOG_ODELAY, LOG_AUTHPRIV);

    getmaster();
    if ((!qflg) && (!cflg) )
        printf(_("Sloggerd started, file is %s\n"), fname);

    /* if we get a cmd string, just exec the cmd */
    if (cflg) {
        if  (log_all_cmds==0)  {// do not log cmd output
            //TODO: dont create /var/log/sl/...
            if (debug) printf("DEBUG: running execv cmd\n");
            char *shname;
            shname = strrchr(shell, '/'); //split at '/'
            if (shname)
                shname++;
            else {
                shname = shell;
            }

            //close stdin to avoid interactive shells
            fclose(stdin);
            char *message;
            if (debug) printf("DEBUG: running exec: %s\n",cflg);
            asprintf(&message,"user:%s; as:%s invoked_cmd:%s; logfile:%s; reason:%s",
                     ruser,upasswd->pw_name,cflg,sfname,comment);
            syslog(LOG_INFO,message);
            usleep(10000);
            execl(shell, shname, "-c", cflg, NULL);
            //we should never get here
            perror(shell);
            exit(EXIT_FAILURE);
        }
        else { //log the output
            printf("running popen exec: %s\n",cflg);
            /* Send syslog command */
            char *message;
            asprintf(&message,"user:%s; as:%s invoked_command:%s; as:%s; logfile:%s; reason:",
                     ruser,upasswd->pw_name,cflg,sfname);
            syslog(LOG_INFO,message);

            //close stdin so user cant invoke interactive shell
            fclose (stdin);
            //Do popen here, read the output & set the exit code
            pinput=popen(cflg,"r");
            if (!pinput)
            {
                fprintf (stderr,
                        "Unable to run command\n");
                        exit(EXIT_FAILURE);
            }
            //read_from_pipe
            int c;
            while ((c = fgetc (pinput)) != EOF) {
                putchar (c);
                if (c='\n') fputc('\r',fscript); //tty kludge
                fputc(c,fscript);
            }
            pclose(pinput);
            usleep(300000); //give other thread chance to read
            exit(EXIT_SUCCESS);
        }
    }

    if  (! isatty(fileno(stdout))) {
        perror("TTY required for interactive session\n");
        exit(EXIT_FAILURE);
    }

    if (minCommentSize<1 ) { 
        comment="(none)";
    }
    else
        {
        int commentLen=0;
        while (1 && minCommentSize>0 ) {
            //if (comment!=NULL) free(comment);
            printf ("\nReason for invoking thus interactive shell for %s:\n",upasswd->pw_name);
            getline(&comment,&commentLen,stdin);
            if (debug) printf ("DEBUG: comment len=%d\n",strlen(comment));
            if ( strlen(comment)>minCommentSize) break;
            printf ("Minimum required comment length is: %d\n", minCommentSize);
        }
        fputs("\n",stdout);
    
        //TODO: wack comment by MAXCOMMENTSIZE 
        if (strlen(comment) > commentSize) comment[commentSize]=(char)0;
    }

    fprintf(fscript,"Reason %s invoked interactive shell for: %s\r\n",ruser,upasswd->pw_name);
    fputs(comment,fscript);
    fputs("\r\n",fscript);
    fflush(fscript);
    fixtty();
   
    if (hflg) {
	if ( (chdir (upasswd->pw_dir)) != 0) {
	    fprintf (stderr,"Warning: cannot change directory to %s\n", upasswd->pw_dir);
	}
    }

    (void) signal(SIGCHLD, finish);
    child = fork();
    if (child < 0) {
        perror("fork");
        fail();
    }
    if (child == 0) {
        subchild = child = fork();
        if (child < 0) {
            perror("fork");
            fail();
        }
        if (child) {
            dooutput();
        }
        else {
            doshell();
        }
    } else
        (void) signal(SIGWINCH, resize);
    doinput();

    return 0;
}

/* Restore the effective UID to its original value. */
void
do_setuid (void)
{
    int status;

    // user bits
    #ifdef _POSIX_SAVED_IDS
    status = seteuid (euid);
    #else
    status = setreuid (ruid, euid);
    #endif
    if (status < 0) {
        fprintf (stderr, "Couldn't set uid.\n");
        exit (status);
    }
    //group bits
    #ifdef _POSIX_SAVED_IDS
    status = setegid (geuid);
    #else
    status = setregid (gruid, geuid);
    #endif
    if (status < 0) {
        fprintf (stderr, "Couldn't set uid.\n");
        exit (status);
    }

    
}

/* Set the effective UID to the real UID. */
void
undo_setuid (void)
{
    int status;
    //user bits
    #ifdef _POSIX_SAVED_IDS
    status = seteuid (ruid);
    #else
    status = setreuid (euid, ruid);
    #endif
    if (status < 0) {
        fprintf (stderr, "Couldn't set uid.\n");
        exit (status);
    }
    //group bits
    #ifdef _POSIX_SAVED_IDS
    status = setegid (gruid);
    #else
    status = setregid (geuid, gruid);
    #endif
    if (status < 0) {
        fprintf (stderr, "Couldn't set uid.\n");
        exit (status);
    }

 
}


void
doinput() {
    register int cc;
    char ibuf[BUFSIZ];

    (void) fclose(fscript);

    while ((cc = read(0, ibuf, BUFSIZ)) > 0)
        (void) write(master, ibuf, cc);
    done();
}

#include <sys/wait.h>

void
finish(int dummy) {
    int status;
    register int pid;
    register int die = 0;

    register int cc;
    time_t tvec;
    char obuf[BUFSIZ];
    struct timeval tv;
    double oldtime=time(NULL), newtime;
    tvec = time((time_t *)NULL);


    while ((pid = wait3(&status, WNOHANG, NULL)) > 0) {
        if (pid == child) {
            die = 1;
            //printf ("Child signal\n");
            
        }
        //printf ("Waiting\n");
    }
    if (die)
        done();
}

void
resize(int dummy) {
    /* transmit window change information to the child */
    (void) ioctl(0, TIOCGWINSZ, (char *)&win);
    (void) ioctl(slave, TIOCSWINSZ, (char *)&win);

    kill(child, SIGWINCH);
}



void
dooutput() {
    register int cc;
    time_t tvec;
    char obuf[BUFSIZ];
    struct timeval tv;
    double oldtime=time(NULL), newtime;

    (void) close(0);
#ifdef HAVE_LIBUTIL
     (void) close(slave);
#endif
    tvec = time((time_t *)NULL);
    my_strftime(obuf, sizeof obuf, "%c\r\n", localtime(&tvec));
    fprintf(fscript, _("Slogger started on %s"), obuf);

    for (;;) {
        if (tflg)
            gettimeofday(&tv, NULL);
        cc = read(master, obuf, sizeof (obuf));
        if (cc <= 0)
            break;
        if (tflg) {
            newtime = tv.tv_sec + (double) tv.tv_usec / 1000000;
            fprintf(stderr, "%f %i\n", newtime - oldtime, cc);
            oldtime = newtime;
        }
        (void) write(1, obuf, cc);
        (void) fwrite(obuf, 1, cc, fscript);
        if (fflg)
            (void) fflush(fscript);
    }
    done();
}

void
doshell() {
    char *shname;

#if 0
    int t;

    t = open(_PATH_TTY, O_RDWR);
    if (t >= 0) {
        (void) ioctl(t, TIOCNOTTY, (char *)0);
        (void) close(t);
    }
#endif

    getslave();
    (void) close(master);
    (void) fclose(fscript);
    (void) dup2(slave, 0);
    (void) dup2(slave, 1);
    (void) dup2(slave, 2);
    (void) close(slave);

    shname = strrchr(shell, '/'); //split at '/'
    if (shname)
        shname++;
    else
        shname = shell;

    
    /* Send  Syslog Interactive shell */           
    char *message;
    usleep(10000);
    asprintf(&message,"user:%s; as:%s invoked_intractive_shell:%s; logfile:%s; reason:%s",
                ruser,upasswd->pw_name,shell,sfname,comment); 
    syslog(LOG_INFO,message);
    if (debug) printf ("DEBUG: execl %s - %s\n",shell, shname);
    execl(shell, "-",(char *)NULL);
    //we should never get here
    perror(shell);
    fail();
}

void
fixtty() {
    struct termios rtt;

    rtt = tt;
    cfmakeraw(&rtt);
    rtt.c_lflag &= ~ECHO;
    (void) tcsetattr(0, TCSAFLUSH, &rtt);
}

void
fail() {

    (void) kill(0, SIGTERM);
    done();
}

void
done() {
    time_t tvec;
    if (subchild) {
        if (!qflg) {
            char buf[BUFSIZ];
            tvec = time((time_t *)NULL);
            my_strftime(buf, sizeof buf, "%c\r\n", localtime(&tvec));
            fprintf(fscript, _("\nSlogger done on %s"), buf);
        }
        (void) fclose(fscript);
        (void) close(master);
    } else {
        (void) tcsetattr(0, TCSAFLUSH, &tt);
        if (!qflg)
            printf(_("Slogger done, file is %s\r\n"), fname);
    }
    exit(0);
}

void
getmaster() {
#ifdef HAVE_LIBUTIL
    (void) tcgetattr(0, &tt);
    (void) ioctl(0, TIOCGWINSZ, (char *)&win);
    if (openpty(&master, &slave, NULL, &tt, &win) < 0) {
        fprintf(stderr, _("openpty failed\n"));
        fail();
    }
#else
    char *pty, *bank, *cp;
    struct stat stb;

    pty = &line[strlen("/dev/ptyp")];
    for (bank = "pqrs"; *bank; bank++) {
        line[strlen("/dev/pty")] = *bank;
        *pty = '0';
        if (stat(line, &stb) < 0)
            break;
        for (cp = "0123456789abcdef"; *cp; cp++) {
            *pty = *cp;
            master = open(line, O_RDWR);
            if (master >= 0) {
                char *tp = &line[strlen("/dev/")];
                int ok;

                /* verify slave side is usable */
                *tp = 't';
                ok = access(line, R_OK|W_OK) == 0;
                *tp = 'p';
                if (ok) {
                    (void) tcgetattr(0, &tt);
                        (void) ioctl(0, TIOCGWINSZ,
                        (char *)&win);
                    return;
                }
                (void) close(master);
            }
        }
    }
    fprintf(stderr, _("Out of pty's\n"));
    fail();
#endif /* not HAVE_LIBUTIL */
}

void
getslave() {
#ifndef HAVE_LIBUTIL
    line[strlen("/dev/")] = 't';
    slave = open(line, O_RDWR);
    if (slave < 0) {
        perror(line);
        fail();
    }
    (void) tcsetattr(slave, TCSAFLUSH, &tt);
    (void) ioctl(slave, TIOCSWINSZ, (char *)&win);
#endif
    (void) setsid();
    (void) ioctl(slave, TIOCSCTTY, 0);
}
@


1.9
log
@after fudging read maxcomment/mincomment
@
text
@a125 2
    //printf (STRINGIFY(CONF_FILE) "\n");
    //printf (STRINGIFY(LOG_DIR) "\n");
d127 1
d137 2
a138 3
        printf("line:%s",line);
        if (strncmp(line, key, keyLen) == 0) {
            //TODO: fix this: if (*value!=NULL) free(*value);
d143 1
a143 1
        //printf("Found key:%s val:%s\n",key,*value);
a182 1
    printf("in readConf\n\n");
a194 1
    
a205 1
    printf("end readConf debug=%d\n\n",debug);
d291 2
a292 1
    ruser=getlogin();
d294 5
a298 2
        printf("Unabel to determine user login id\n");
        exit(EXIT_FAILURE);
d405 4
d410 2
a411 8

    while (1) {
        //if (comment!=NULL) free(comment);
        printf ("\nReason for invoking thus interactive shell for %s:\n",upasswd->pw_name);
        getline(&comment,&commentSize,stdin);
        if (debug) printf ("DEBUG: comment len=%d\n",strlen(comment));
        if ( strlen(comment)>minCommentSize) break;
        printf ("Minimum required comment length is: %d\n", minCommentSize);
d413 12
a424 1
    fputs("\n",stdout);
d426 4
a429 1
    //TODO: wack comment by MAXCOMMENTSIZE 
@


1.8
log
@before using log_all_output
@
text
@d80 1
a107 1
int log_all_cmds=0;
d109 1
d111 4
a114 1
static char *progname;
d137 2
a138 1
        //printf("line:%s",line);
d140 1
a140 1
            if (*value!=NULL) free(*value);
d180 39
d241 1
a241 1

d288 1
a288 1

a308 14
    /* Get options from congig file */
    char *value;
    int found=0;
    found=read_conf("log_all_cmds",&value);
    if (found==1) {
        //printf ("found, result is: %s\n",value);
        log_all_cmds=atoi(value);
    }
    else {
        //printf ("Not found\n");
        log_all_cmds=0; // set to not log all cmds
    }
    if (debug) printf("log_all_cmds=%d\n",log_all_cmds);
    
d350 24
a373 10
    printf("breakpoint cflg=%d log_all_cmds=%d\n",cflg,log_all_cmds);
    if ((cflg) && (log_all_cmds==0) ) { 
        //TODO: remove command that does popen, this is run instead for !log_all_cmds
        printf("DEBUG: running execv cmd\n");
        char *shname;
        shname = strrchr(shell, '/'); //split at '/'
        if (shname)
            shname++;
        else {
            shname = shell;
d375 7
d383 21
a403 10
        //TODO: presere enviroment?
        //close stdin to avoid interactive shells
        fclose(stdin);
        char *message;
        printf("running exec: %s\n",cflg);
        asprintf(&message,"user:%s; as:%s invoked_cmd:%s; logfile:%s; reason:%s",
                     ruser,upasswd->pw_name,cflg,sfname,comment);
        syslog(LOG_INFO,message);
        usleep(10000);
        execl(shell, shname, "-c", cflg, NULL);
a405 3
    // This only needs to be run in interactive shells
    int commentSize;
    commentSize=MAXCOMMENTSIZE; //TODO: we arn't using this value yet
d413 2
a414 2
        if ( strlen(comment)>MINCOMMENTSIZE) break;
        printf ("Minimum required comment length is: %s\n", STRINGIFY(MINCOMMENTSIZE));
d418 1
a629 35
    if (cflg) {

            /* TODO: this never gets exec, run by eairlier if (cflg) */
            printf("running popen exec: %s\n",cflg);
            /* Send syslog command */
            char *message;
            asprintf(&message,"user:%s; as:%s invoked_command:%s; as:%s; logfile:%s; reason:",
                     ruser,upasswd->pw_name,cflg,sfname);
            syslog(LOG_INFO,message);   

            //close stdin so user cant invoke interactive shell
            fclose (stdin);
            if (log_all_cmds) {
                //Do popen here, read the output & set the exit code
                pinput=popen(cflg,"r");
            if (!pinput)
            {
                fprintf (stderr,
                        "Unable to run command\n");
                        exit(EXIT_FAILURE);
            }            
            //read_from_pipe
            int c;
            while ((c = fgetc (pinput)) != EOF)
                putchar (c);
    
            pclose(pinput);
            
            usleep(300000); //give other thread chance to read
            
            exit(EXIT_SUCCESS);
        }
        //else { //execv the process, do not record output
        //}
    }        
d631 9
a639 10
    else {
        /* Send  Syslog Interactive shell */           
        char *message;
        usleep(10000);
        asprintf(&message,"user:%s; as:%s invoked_intractive_shell:%s; logfile:%s; reason:%s",
                    ruser,upasswd->pw_name,shell,sfname,comment); 
        syslog(LOG_INFO,message);
        if (debug) printf ("DEBUG: execl %s - %s\n",shell, shname);
        execl(shell, "-",(char *)NULL);
    }
@


1.7
log
@before removing uneeded command line opts
@
text
@d55 1
a55 12

// Default Log Directory
#ifndef LOG_DIR
#define LOG_DIR "/var/log/sl"
#endif

#define VERSION "1.0"

// Default config file
#ifndef CONF_FILE 
#define CONF_FILE "/etc/slogger.conf"
#endif
a65 11
//for MAXHOSTNAMELEN
//#include <asm/param.h>?
#ifndef MAXHOSTNAMELEN
#define MAXHOSTNAMELEN 64
#endif

#define STRINGIFY(x) XSTRINGIFY(x)
#define XSTRINGIFY(x) #x
//Max size for comments
#define MAXCOMMENTSIZE 1000

d91 2
a92 1
char	comment[MAXCOMMENTSIZE+1]; 
d102 1
a150 1
//TODO: groupid!
d216 1
a216 1
    while ((ch = getopt(argc, argv, "c:fqt")) != -1)
d233 3
d239 1
a239 1
                _("usage: %s [-a] [-f] [-q] [-t] [file]\n"),progname);
a250 1
    //TODO: use getuid
d260 4
a263 2
    //printf ("euid: %d\n",euid); //suid user
    //printf ("ruid: %d\n",ruid); //real user
d277 1
a277 1
    //printf("log_all_cmds=%d\n",log_all_cmds);
d279 1
a279 2
    //get the euid name of the process
    struct passwd *upasswd;
d285 6
a290 4
// TODO: below!
//      if (! (pw && pw->pw_name && pw->pw_name[0] && pw->pw_dir && pw->pw_dir[0]
//         && pw->pw_passwd))
//    error (EXIT_FAILURE, 0, _("user %s does not exist"), new_user);
d293 1
a293 1
    //printf("DEBUG: euid:%s shell:%s\n",upasswd->pw_name,shell);
a303 2
        

d305 1
a305 1
    fscript = fopen(fname, "w");
d313 2
d317 1
a317 1
        printf(_("Slogger started, file is %s\n"), fname);
d320 4
a323 1
    if (cflg) {
d335 6
d345 11
a355 6
    printf ("\r\nReason for invoking thus interactive shell for %s:\n",upasswd->pw_name);
    /*int buf_size=80;
    char buf[buf_size];
    while (fgets(buf, buf_size, stdin)) { 
        //TODO: now write the chars read to the log file
        fputs(buf,fscript);
d357 2
a358 2
    */

d360 1
a360 9
    char c;
    int x=0;
    while (c != '\n' && c != EOF && x<MAXCOMMENTSIZE ) {
        c = fgetc (stdin);
        putc(c,fscript);
        comment[x]=c;
        x++;
    }
    comment[x]='\0';
d363 1
d367 1
a367 2
	    //TODO:: Below to stderr
	    printf ("warning: cannot change directory to %s\n", upasswd->pw_dir);
a370 2
    fixtty();

a492 1
        //sleep (2);
a569 2
    //Open syslog
    openlog("slogger", LOG_ODELAY, LOG_AUTHPRIV);
d571 8
a578 9
           
             /* Send syslog command */
            if (euid==0) // root shell
                 syslog(LOG_NOTICE,_("user:%s; invoked command:%s; as:%s; logfile:%s"),
                     ruser,cflg,euid,sfname);
            else
                 syslog(LOG_INFO,_("user:%s; invoked command:%s; as:%s logfile:%s"),
                     ruser,cflg,euid,sfname);
    
d607 7
a613 9
         /* Send  Syslog Interactive shell */           
         if (euid==0) // root shell
              syslog(LOG_NOTICE,_("user:%s; invoked interactive shell:%s; as:%s logfile:%s; reason:%s"),
                  ruser,shell,euid,sfname,comment);
         else
             syslog(LOG_INFO,_("user:%s; invoked interactive shell:%s; as:%s; logfile:%s reason:%s"),
                  ruser,shell,euid,sfname,comment);

        //printf ("DEBUG: execl %s - %s\n",shell, shname);
@


1.6
log
@before cleaning code
@
text
@d61 2
d85 2
d111 3
a113 1
char	*fname;
a121 1
int	aflg = 0;
d232 1
a232 1
                progname, PACKAGE_STRING);
d237 1
a237 1
    while ((ch = getopt(argc, argv, "ac:fqt")) != -1)
a238 3
        case 'a':
            aflg++;
            break;
d257 1
a257 1
                _("usage: script [-a] [-f] [-q] [-t] [file]\n"));
d317 1
a320 1
    //fprintf(fscript, _("\nSlogger done on %s\r"), ldate);
d323 1
a323 1
    fscript = fopen(fname, aflg ? "a" : "w");
d363 2
a364 1
    while (c != '\n' && c != EOF) {
d367 2
d370 1
a370 1

d589 2
a590 1
                 syslog(LOG_NOTICE,_("user:%s; invoked command:%s; as:%s "),ruser,cflg,euid);
d592 2
a593 1
                 syslog(LOG_INFO,_("user:%s; invoked command:%s; as:%s "),ruser,cflg,euid);
a597 1
            //TODO: dump command to syslog
d599 2
a600 4
            //execl(shell, shname, "-c", cflg, NULL);
            //Do popen here, read the output & set the exit code
            // what about piping stdin?
            pinput=popen(cflg,"r");
a615 6
            //TODO send signal to parent i a exiting
            /*printf("terew\n");
            raise(SIGCHLD);
            printf("terew\n");
            sleep(1);*/
            
a616 1
            //return EXIT_SUCCESS; 
d625 2
a626 1
              syslog(LOG_NOTICE,_("user:%s; invoked interactive shell:%s; as:%s "),ruser,shell,euid);
d628 2
a629 1
             syslog(LOG_INFO,_("user:%s; invoked interactive shell:%s; as:%s "),ruser,shell,euid);
a632 1
	//execl(shell, shname,(char *)NULL);
@


1.5
log
@befor changing ruid to getuid
@
text
@d52 1
d123 1
d204 1
a204 1
    gruid = getgid ();
d269 1
a269 1
    char *ruser=getlogin();
d277 2
a278 2
    printf ("euid: %d\n",euid);
    printf ("ruid: %d\n",ruid);
d578 2
d582 7
d626 6
@


1.4
log
@working version before cleaning code.
@
text
@d57 1
a57 1
#define LOG_DIR "/var/log/ss"
d265 1
d275 2
a276 2
    //printf ("euid: %d\n",euid);
    //printf ("ruid: %d\n",ruid);
d312 1
a312 1
    asprintf(&fname,"%s/ss-%s-%s-%s-%s",log_dir,hname,ruser,upasswd->pw_name,ldate);
@


1.3
log
@before adding discription field
after cd $HOME fixes
@
text
@d268 2
a269 2
        printf("Unabel to determine user id\n");
        //exit(EXIT_FAILURE);
d295 2
a296 2
        printf("Unknown euid\n");
        /*exit(EXIT_FAILURE);*/
d346 20
a365 1
    printf ("hflag: %d\n",hflg);
@


1.2
log
@after not forking -c commands
@
text
@d118 1
d247 3
d298 5
d327 1
a327 1
    if (!qflg)
d339 4
d346 8
d557 3
d590 2
a591 2
        else { //execv the process, do not record output
        }
d595 3
a597 3
        //execl(shell, shname, "-l","-i", NULL);
        //printf ("DEBUG: execv %s %s\n",shell, shname);
        execl(shell, shname, NULL);
@


1.1
log
@Initial revision
@
text
@a319 1
    fixtty();
d323 8
a330 1
        execl(shell, shname, "-c", cflg, NULL)
d333 2
@
